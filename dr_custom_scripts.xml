<?xml version="1.0" encoding="UTF-8" ?>
<dr_custom_scripts>
	<scr id="9836D087-881D-2161-19AF-2C6DF49A964A" name="Before Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="B50F3C56-0DC4-6376-8CF9-9CB189DC97DD" name="After Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[/*
variable ddlStatementsList should be used to return the list with DDL statements
that are created by script - as shown below:
ddlStatementsList.add(new java.lang.String(ddl));
other available variables:
- model - relational model instance
- pModel - physical model instance
- table - the table in relational model
- tableProxy - table definition in physical model
*/
var ddl;
var lname;
//journal table name suffix
jnTabSuf = "_JN";
// trigger name suffix
jnTrgSuf = "_JNtrg";
prompt = model.getAppView().getSettings().isIncludePromptInDDL();
useSchema = model.getAppView().getSettings().isIncludeSchemaInDDL();
if(model.getStorageDesign().isOpen()){
	if(useSchema){
	     lname = tableProxy.getLongName();
	}else{
		lname = tableProxy.getName();
	}
}else{
	if(useSchema){
	     lname = table.getLongName();
	}else{
		lname = table.getName();
	}
}
if(prompt){
	ddl= "PROMPT Creating Journal Table for '"+lname+"';\n";
}else{
	ddl = "";
}
ddl = ddl + "CREATE TABLE "+lname+jnTabSuf+"\n"+
" (JN_OPERATION CHAR(3) NOT NULL"+"\n"+
" ,JN_ORACLE_USER VARCHAR2(30) NOT NULL"+"\n"+
" ,JN_DATETIME DATE NOT NULL"+"\n"+
" ,JN_NOTES VARCHAR2(240)"+"\n"+
" ,JN_APPLN VARCHAR2(35)"+"\n"+
" ,JN_SESSION NUMBER(38)"+"\n";
cols = table.getElements();
for(var i=0;i<cols.length;i++){
	col = cols[i];
	ddl = ddl +" ,"+col.getName()+" "+col.getDatatypeString();
	if(col.isMandatory()){
		ddl = ddl + " NOT NULL\n";
	}else{
		ddl = ddl + "\n";
	}
}
ddl = ddl + " );";
ddlStatementsList.add(new java.lang.String(ddl));
if(prompt){
	ddl= "\nPROMPT Creating Journal Trigger for '"+lname+"';\n";
}else{
	ddl = "\n";
}
ddl = ddl +
"CREATE OR REPLACE TRIGGER "+lname+jnTrgSuf +"\n"+
"  AFTER \n" +
"  INSERT OR \n" +
"  UPDATE OR \n" +
"  DELETE ON "+lname+" for each row \n" +
" Declare \n" +
"  rec "+lname+"_JN"+"%ROWTYPE; \n" +
"  blank "+lname+"_JN"+"%ROWTYPE; \n" +
"  BEGIN \n" +
"    rec := blank; \n" +
"    IF INSERTING OR UPDATING THEN \n" ;
for(var i=0;i<cols.length;i++){
	col = cols[i];
	ddl = ddl + "      rec."+col.getName()+" := :NEW."+col.getName()+"; \n";
}
ddl = ddl +
"      rec.JN_DATETIME := SYSDATE; \n" +
"      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); \n" +
"      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); \n" +
"      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); \n" +
"      IF INSERTING THEN \n" +
"        rec.JN_OPERATION := 'INS'; \n" +
"      ELSIF UPDATING THEN \n" +
"        rec.JN_OPERATION := 'UPD'; \n" +
"      END IF; \n" +
"    ELSIF DELETING THEN \n" ;
for(var i=0;i<cols.length;i++){
	col = cols[i];
	ddl = ddl + "      rec."+col.getName()+" := :OLD."+col.getName()+"; \n";
}
ddl = ddl +
"      rec.JN_DATETIME := SYSDATE; \n" +
"      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); \n" +
"      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); \n" +
"      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); \n" +
"      rec.JN_OPERATION := 'DEL'; \n" +
"    END IF; \n" +
"    INSERT into "+lname+"_JN"+" VALUES rec; \n" +
"  END; \n" +
"  /"
ddlStatementsList.add(new java.lang.String(ddl));]]>
		</script>
	</scr>
	<scr id="DC383793-5C2E-F62A-5241-35B8ACE86134" name="End Of Script" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="1C0CDD35-A0D6-47E5-C702-7FB537C8A8C0" name="Instead Of Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="0DC38187-8245-8904-7E00-D4B6DF394899" name="Before Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="83D0D285-DF95-0BE7-EF4F-AC3F2D9CDE94" name="After Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[ddl = "-- After Create script example for table " +table.getLongName();
ddlStatementsList.add(new java.lang.String(ddl));]]>
		</script>
	</scr>
	<scr id="6FDC20F3-D5B1-9711-C93F-745217AC8664" name="End Of Script" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="27EEAD3F-3367-9D6F-8E02-D44189C855A1" name="Instead Of Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="0BAA564F-AB5F-D776-2E4F-31FDB3047F69" name="Tables to lower case - Rhino" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 name = table.getName().toLowerCase();
 table.setName(name);
 columns = table.getElements();
 size = table.getElementsCollection().size();
 for (var i = 0; i < size; i++) {
	column = columns[i];
	cname = column.getName().toLowerCase();
	column.setName(cname);
 }
 table.setDirty(true);
 keys = table.getKeys();
 for (var i = 0; i < keys.length; i++) {
  key = keys[i];
    if(!key.isFK()){
     kname = key.getName().toLowerCase();
     key.setName(kname);
   }else{
     kname = key.getFKAssociation().getName().toLowerCase();
     key.getFKAssociation().setName(kname);
     key.getFKAssociation().setDirty(true);
   }
 }
}]]>
		</script>
	</scr>
	<scr id="B673F271-4836-DD48-15AC-487DDECCAF49" name="Tables to upper case - JRuby" object="relational" engine="JSR 223 JRuby Engine" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables =$model.getTableSet().toArray()
for t in 0..tables.length-1
 table = tables[t]
 name = table.getName().upcase
 table.setName(name)
 columns = table.getElements()
 size = table.getElementsCollection().size()-1
 for i in 0..size
	column = columns[i]
	cname = column.getName().upcase
	column.setName(cname)
 end
 keys = table.getKeys()
 for i in 0..keys.length-1
  key = keys[i]
  kname = key.getName().upcase
  key.setName(kname)
 end
end]]>
		</script>
	</scr>
	<scr id="3E7C4F9E-9FCB-56C7-086F-F976F9A66384" name="Tables to upper case - JRuby - library usage" object="relational" engine="JSR 223 JRuby Engine" type="" var="model" library="Jruby lib" method="tables_up" purpose="transformation" >
		<script>
			<![CDATA[def tables_up(model)
tables = model.getTableSet().toArray()
for t in 0..tables.length-1
 table = tables[t]
 name = table.getName().upcase
 table.setName(name)
 columns = table.getElements()
 size = table.getElementsCollection().size()-1
 for i in 0..size
	column = columns[i]
	cname = column.getName().upcase
	column.setName(cname)
 end
 keys = table.getKeys()
 for i in 0..keys.length-1
  key = keys[i]
  kname = key.getName().upcase
  key.setName(kname)
 end
end
return true
end]]>
		</script>
	</scr>
	<scr id="E60A5A28-BB9B-3787-10E7-259DF900B9E6" name="Table abbreviation to column" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 abbr = table.getAbbreviation()+"_";
 if(!"_".equals(abbr)){
     columns = table.getElements();
     for (var i = 0; i < columns.length; i++) {
        column = columns[i];
        cname = column.getName();
        if(!cname.startsWith(abbr)){
         column.setName(abbr+cname);
        }
     }
 }
}]]>
		</script>
	</scr>
	<scr id="9BE4E26C-36D8-A92C-ADEA-F183327DC239" name="Remove Table abbr from column" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 abbr = table.getAbbreviation()+"_";
 count = table.getAbbreviation().length()+1;
 if(!"_".equals(abbr)){
     columns = table.getElements();
     for (var i = 0; i < columns.length; i++) {
        column = columns[i];
        cname = column.getName();
        if(cname.startsWith(abbr)){
         column.setName(cname.substring(count));
         table.setDirty(true);
        }
     }
 }
}]]>
		</script>
	</scr>
	<scr id="5A8A151A-13FD-4B0A-E233-E3C5126BA02C" name="Tables to upper case - Rhino" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 name = table.getName().toUpperCase();
 table.setName(name);
 columns = table.getElements();
 size = table.getElementsCollection().size();
 for (var i = 0; i < size; i++) {
	column = columns[i];
	cname = column.getName().toUpperCase();
	column.setName(cname);
 }
 table.setDirty(true);
 keys = table.getKeys();
 for (var i = 0; i < keys.length; i++) {
  key = keys[i];
    if(!key.isFK()){
     kname = key.getName().toUpperCase();
     key.setName(kname);
   }else{
     kname = key.getFKAssociation().getName().toUpperCase();
     key.getFKAssociation().setName(kname);
     key.getFKAssociation().setDirty(true);
   }
 }
}]]>
		</script>
	</scr>
	<scr id="0528C35C-F29B-E7BB-57AC-37BA2780A98D" name="Table template - uses column name" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[// columns are found by column name
// allowing reuse of already existing columns
// dynamic property ctemplateID is set afterwards - will keep connection to template
// column even if the name of column is changed
var t_name = "table_template";
var p_name = "ctemplateID";
template = model.getTableSet().getByName(t_name);
if(template!=null){
    tcolumns = template.getElements();
    tables = model.getTableSet().toArray();
    for (var t = 0; t<tables.length;t++){
     table = tables[t];
    // compare name ignoring the case
     if(!table.getName().equalsIgnoreCase(t_name)){
         for (var i = 0; i < tcolumns.length; i++) {
            column = tcolumns[i];
            col = table.getElementByName(column.getName());
            if(col==null){
             col = table.getColumnByProperty(p_name,column.getObjectID());
            }
            if(col==null){
             col = table.createColumn();
            }
            column.copy(col);
            //set property after copy otherwise it'll be cleared by copy
            col.setProperty(p_name,column.getObjectID());
            table.setDirty(true);
         }
     }
    }
}]]>
		</script>
	</scr>
	<scr id="6279C414-90DD-A52B-4CEB-8D49AB31DC10" name="Copy Comments to Comments in RDBMS" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[max_length = 4000;
function copyComments(object){
 if(object.getCommentInRDBMS().equals("")){
   if(!object.getComment().equals("")){
     if(object.getComment().length()>max_length){
       object.setCommentInRDBMS(object.getComment().substring(0, max_length));
     }else{
       object.setCommentInRDBMS(object.getComment());
     }
     object.setDirty(true);
   }
 }
}

tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t]
 copyComments(table);
 columns = table.getElements();
 size = table.getElementsCollection().size();
 for (var i = 0; i < columns.length; i++) {
	column = columns[i];
	copyComments(column);
 }
 keys = table.getKeys();
 for (var i = 0; i < keys.length; i++) {
   key = keys[i];
   if(!key.isFK()){
     copyComments(key);
   }else{
     copyComments(key.getFKAssociation());
   }
 }
}]]>
		</script>
	</scr>
	<scr id="7C4EDFC0-26EA-859C-DBD9-AC9345DEAF98" name="Create index on FK" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[function getIndex(tab,cols){
 keys = tab.getKeys();
 for (var i = 0; i < keys.length; i++) {
  index = keys[i];
  if(!(index.isPK() || index.isUnique()) && !index.isFK() && index.isIndexForColumns(cols)){
     return index
   }
 }
 return null;
}

tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 indexes = table.getKeys();
 for (var i = 0; i < indexes.length; i++) {
    index = indexes[i];
    if(index.isFK()){
     columns = index.getColumns();
     if(columns.length>0){
       newIndex = getIndex(table,columns);
       if(newIndex==null){
         newIndex = table.createIndex()
         table.setDirty(true);
         for (var k = 0; k < columns.length; k++){
           newIndex.add(columns[k]);
         }
       }
     }
   }
 }
}]]>
		</script>
	</scr>
	<scr id="1726EC74-A64B-0C0F-83DB-2A4BEF0D3DCA" name="Columns order" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[// sorts table columns as asked here https://forums.oracle.com/forums/thread.jspa?threadID=2508315&tstart=0
// "...first the pks columns, after them fk columns and after the not null columns"
function addPKcolumns(list,table){
	pk = table.getPK();
	if(pk!=null){
		pcols = pk.getColumns();
		for(var i = 0;i<pcols.length;i++){
			col = pcols[i];
			//in fact don't need this check, because PK columns are processed first
			if(!list.contains(col)){
				list.add(col);
			}
		}
	}
}

function addFKcolumns(list,fkeys){
	for(var k=0;k<fkeys.length;k++){
		fcols = fkeys[k].getColumns();
		for(var i = 0;i<fcols.length;i++){
		  col = fcols[i];
		  if(!list.contains(col)){
			list.add(col);
		  }
		}
	}
}
//adds mandatory or oprional columns to list depending on mand parameter
function addMandatoryOptColumns(list,cols, mand){
	for(var i = 0;i<cols.length;i++){
		col = cols[i];
		if(col.isMandatory() == mand && !list.contains(col)){
			list.add(col);
		}
	}
}

tables = model.getTableSet().toArray();
list = new java.util.ArrayList();
for (var t = 0; t<tables.length;t++){
	list.clear();
	table = tables[t];
	cols = table.getElements();
	// add PK columns to list
	addPKcolumns(list,table);
	// add FK columns to list
	addFKcolumns(list,table.getFKAssociations());
	//add mandatory columns
	addMandatoryOptColumns(list,cols,true);
	//add optional columns
	addMandatoryOptColumns(list,cols,false);
	//use list to reorder columns
	ord_cols = list.toArray();
	for(var n = 0;n<ord_cols.length;n++){
		table.moveToIndex(ord_cols[n],n);
	}
	//prevent reordering from enginnering, can be changed with UI
	table.setAllowColumnReorder(false);
	table.setDirty(true);
}]]>
		</script>
	</scr>
	<scr id="F54B1A9C-F951-EB88-E905-5599533569B1" name="Create subview from tables in serch result " object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[objs = model.getLastSearchResult().toArray();
var dp;
var sv;
//create subview and add tables to it
for(var i = 0;i<objs.length;i++){
	obj = objs[i];
	// use "Entity" for entities and logical model
	if(obj.getObjectTypeName().equals("Table")){
		if(dp==null){
			dp = obj.getDesignPart();
			sv = dp.createDesignPartSubView();
			// uncomment next line if want to set name
		     //sv.setName("Name");
		     sv.getPlaceHolder().setVisible(true);
		}
		sv.addViewFor(obj);
	}
}
if(dp!=null){
 //add foreign keys if you want to
 for(var i = 0;i<objs.length;i++){
	obj = objs[i];
	// use "Entity" for entities and logical model
	if(obj.getObjectTypeName().equals("Table")){
		tv = obj.getFirstViewForDPV(sv);
		if(tv!=null){
			//for entities and logical model use 
			//tv.addTVRelations(); 
			tv.addTVFKRelations();
		}
	}
 }
 //add Arcs if you want to
 for(var i = 0;i<objs.length;i++){
	obj = objs[i];
	if(obj.getObjectTypeName().equals("Table")){
		tv = obj.getFirstViewForDPV(sv);
		if(tv!=null){
			tv.addArcs();
		}
	}
 }
 //arrange diagram
 sv.rearrangeNewDiagram();
}]]>
		</script>
	</scr>
	<scr id="EF64BEDD-B648-C41B-60C7-B9EA938E0A3C" name="Remove template columns and related attributes" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[/* removes the columns created with "Table template..." script, also removes related attributes
*  from logical model
*  more details here http://www.thatjeffsmith.com/archive/2015/03/adding-common-columns-to-tables-via-templates-and-transformation-scripts/
*/
var t_name = "table_template";
var p_name = "ctemplateID";
template = model.getTableSet().getByName(t_name);
if(template!=null){
    tcolumns = template.getElements();
    tables = model.getTableSet().toArray();
    for (var t = 0; t<tables.length;t++){
     table = tables[t];
    // compare name ignoring the case
     if(!table.getName().equalsIgnoreCase(t_name)){
         for (var i = 0; i < tcolumns.length; i++) {
            column = tcolumns[i];
            col = table.getColumnByProperty(p_name,column.getObjectID());
            if(col!=null){
            	attr = col.getEngAttribute();
            	if(attr!=null){
            		ent = attr.getEntity();
            		attr.remove();
            		if(ent!=null){
            			ent.setDirty(true);
            		}
            	}
             col.remove();
             table.setDirty(true);
            }
         }
     }
    }
}]]>
		</script>
	</scr>

	<scr id="D36CE536-D575-BE5C-625F-23DE23913C6B" name="Complex rule - check comments demo" object="Table" engine="Oracle Nashorn" type="Warning" var="table" library="my first library" method="checkcomments" purpose="validation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="D72E63EC-9DA2-3537-F8C9-AE8ACEDC73D2" name="Length of Not Null Constraint name" object="Column" engine="Oracle Nashorn" type="Error" var="column" library="my first library" method="NotNullConstr_Name_Length" purpose="validation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="3F2B77AE-F97F-EF6D-4D6D-C9FE4CC78999" name="Optional FK with mandatory columns" object="Index/Constraint" engine="Oracle Nashorn" type="Warning" var="index" library="" method="" purpose="validation" >
		<script>
			<![CDATA[var index;
// define function - function parameter doesn't need to be named index
function checkFKColumns(index){
  //check it's foreign key index, otherwise FK is null
 if(index.isFK()){
 	if(!index.getFKAssociation().isMandatory()){
	 cols = index.getElements();
	 for(var i=0;i<cols.length;i++){
		if(cols[i].isMandatory()){
			return false;
		}
	 }
 	}
 }
 return true;
}
// invoke the function
checkFKColumns(index);]]>
		</script>
	</scr>

	<lib id="B310E434-78AE-6AED-EA94-6808B0262483" name="my first library" engine="Oracle Nashorn" methods="checkcomments,NotNullConstr_Name_Length" >
		<script>
			<![CDATA[// variable used to return custom message
var ruleMessage;
// variable used to return the type of the rule Error
// or Warning and red/blue color will be used for result
// if another custom type is returned (Problem in the rule below) 
// then result is colored in yellow
var errType;
var table;
function checkcomments(object){
 result = true;
 ruleMessage="";
 if(table.getCommentInRDBMS().equals("")){
  ruleMessage="no comments in RDBMS defined";
  errType="Problem:";
  result = false;
 }
 if(table.getComment().equals("")){
  if(ruleMessage.equals("")){
   ruleMessage="no comments defined";
  }else{
   ruleMessage= ruleMessage +" , no comments defined";
   }
   // can be changed to Warning    
   errType="Error";
  return false;
 }
 return result;
}
//rule for not null constraint name
function NotNullConstr_Name_Length(column){
 model = column.getDesignPart();
 name = column.getNotNullConstraintName();
 result = true;
 if(name!=null && !"".equals(name)){
	holder = model.getNamingOptionsHolderFor("oracle.dbtools.crest.model.design.constraint.TableLevelConstraint");
	if ((holder.getMaxNameLength() > 0) && (name.length() > holder.getMaxNameLength())) {
		result = false;
	}
 }
 return result
}]]>
		</script>
	</lib>
	<lib id="2518F33A-DE50-9E1D-7216-DD2A0FD6B84C" name="Jruby lib" engine="JSR 223 JRuby Engine" methods="tables_up" >
		<script>
			<![CDATA[def tables_up(model)
tables = model.getTableSet().toArray()
for t in 0..tables.length-1
 table = tables[t]
 name = table.getName().upcase
 table.setName(name)
 columns = table.getElements()
 size = table.getElementsCollection().size()-1
 for i in 0..size
	column = columns[i]
	cname = column.getName().upcase
	column.setName(cname)
 end
 keys = table.getKeys()
 for i in 0..keys.length-1
  key = keys[i]
  kname = key.getName().upcase
  key.setName(kname)
 end
end
return true
end]]>
		</script>
	</lib>


	<ddl_transformation_script_set id="B4E65BCB-CFF5-1302-E0BC-0C329BF9890E" name="Journal tables" description="" active="true">
			<script id="9836D087-881D-2161-19AF-2C6DF49A964A"/>
			<script id="1C0CDD35-A0D6-47E5-C702-7FB537C8A8C0"/>
			<script id="B50F3C56-0DC4-6376-8CF9-9CB189DC97DD"/>
			<script id="DC383793-5C2E-F62A-5241-35B8ACE86134"/>
	</ddl_transformation_script_set>
	<ddl_transformation_script_set id="86649BAE-547E-99D5-8B00-54B3BB9BB6BB" name="Empty script" description="" active="false">
			<script id="0DC38187-8245-8904-7E00-D4B6DF394899"/>
			<script id="27EEAD3F-3367-9D6F-8E02-D44189C855A1"/>
			<script id="83D0D285-DF95-0BE7-EF4F-AC3F2D9CDE94"/>
			<script id="6FDC20F3-D5B1-9711-C93F-745217AC8664"/>
	</ddl_transformation_script_set>
</dr_custom_scripts>